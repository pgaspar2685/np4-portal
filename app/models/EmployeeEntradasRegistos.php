<?php

namespace CRM\Models;

use \CRM\debug\debug;
use \CRM\models\Eventos;


class EntradasRegistos extends BaseModel
{
    /**
     * @var int
     */
    public $id_tipo;

    /**
     * @var string
     */
    public $username;

    /**
     * @var date
     */
    public $data_dia;

    /**
     * @var int
     */
    public $internal;

    /**
     * @var time
     */
    public $hora_inicio;

    /**
     * @var time
     */
    public $hora_fim;

    public function initialize()
    {
        //$this->setConnectionService('databaseEngine');
        $this->setSource('employee_registos');

        $this->hasOne("id_tipo", __NAMESPACE__ . '\EntradasTipos', "id", [
            'alias' => 'EntradasTipos',
            'reusable' => true
        ]);
        $this->belongsTo("username", __NAMESPACE__ . '\Users', "username", [
            'alias' => 'Users',
            'reusable' => true
        ]);
        // $this->addBehavior(new Blameable());
    }

    public function afterCreate()
    {

        if (in_array($this->id_tipo, [
            EntradasTipos::TIPO_TELETRABALHO,
            EntradasTipos::TIPO_FERIAS,
            EntradasTipos::TIPO_FERIAS_PARCIAL
        ])) {
            /////////////////////////////////////
            // introduzir um evento no calendário
            /////////////////////////////////////
            $evento = new \CRM\Models\Eventos();

            switch ($this->id_tipo) {
                case EntradasTipos::TIPO_FERIAS:
                    $evento->id_tipo = EventosTipos::findFirst("id_bhtipo = " . EntradasTipos::TIPO_FERIAS )->id;
                    $evento->titulo = "Férias";
                    break;
                case EntradasTipos::TIPO_FERIAS_PARCIAL:
                    $evento->id_tipo = EventosTipos::findFirst("id_bhtipo = " . EntradasTipos::TIPO_FERIAS_PARCIAL )->id;
                    $evento->titulo = "Férias parcial";
                    break;
                case EntradasTipos::TIPO_TELETRABALHO:
                    $evento->id_tipo = EventosTipos::findFirst("id_bhtipo = " . EntradasTipos::TIPO_TELETRABALHO )->id;
                    $evento->titulo = "Teletrabalho";
                    break;
            }

            $evento->data_evento = $this->data_dia . " " . $this->hora_inicio;
            $evento->data_fim = $this->data_dia . " " . $this->hora_fim;
            $evento->username = $this->username;

            if (!$evento->create()) {
                \CRM\debug\debug::dump($evento->_errorMessages);
            }
        }
    }

    public function afterDelete()
    {
        // apagar eventos do tipo férias q possam estar criados
        $this->getDI()
            ->get('logger')
            ->info('afterDelete :: id_tipo: '.$this->id_tipo.' array:'.print_r([
                    EntradasTipos::TIPO_TELETRABALHO,
                    EntradasTipos::TIPO_FERIAS,
                    EntradasTipos::TIPO_FERIAS_PARCIAL
                ], true));
        if (in_array($this->id_tipo, [
            EntradasTipos::TIPO_TELETRABALHO,
            EntradasTipos::TIPO_FERIAS,
            EntradasTipos::TIPO_FERIAS_PARCIAL
        ])) {

            $this->getDI()
                ->get('logger')
                ->info('[EntradasRegistos.afterDelete] Apagar eventos correspondentes no calendario');

            $builder = $this->modelsManager->createBuilder()
                ->addFrom('\CRM\Models\Eventos', 'e')
                ->join('\CRM\Models\EventosTipos', "et.id = e.id_tipo", 'et')
                ->where('cast(e.data_evento as date) = :data_dia: AND e.username = :username:', [
                    'data_dia' => $this->data_dia,
                    'username' => $this->username,
                ])
                ->andWhere('et.id_bhtipo = :tipo:', ['tipo' => $this->id_tipo]);
            $query = $builder->getQuery();
            $records = $query->execute();

            if (!$records->delete()) {
                $this->getDI()
                    ->get('logger')
                    ->error('Algo correu mal a apagar as férias do calendário!');
            }
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }
}